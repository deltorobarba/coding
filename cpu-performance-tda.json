{"cells":[{"cell_type":"markdown","source":["## **CPU Performance Test Run**"],"metadata":{"id":"NH0omEkd2Qiu"}},{"cell_type":"markdown","source":["##### <font color=\"red\">*Simple Example*"],"metadata":{"id":"-4zjA63e4o1-"}},{"cell_type":"code","source":["import math\n","import sympy\n","import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"id":"BS3tXsqm5PkL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from psutil import *\n","cpu_count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CXUsyb6c4w59","executionInfo":{"status":"ok","timestamp":1668442051027,"user_tz":-60,"elapsed":8,"user":{"displayName":"Alexander Del Toro Barba","userId":"15093306339731700599"}},"outputId":"63fa3390-fc54-4f22-b1c7-3834d0268c08"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["!cat /proc/cpuinfo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nLzdolJL4-ZB","executionInfo":{"status":"ok","timestamp":1668442053009,"user_tz":-60,"elapsed":439,"user":{"displayName":"Alexander Del Toro Barba","userId":"15093306339731700599"}},"outputId":"d347bf65-0c2c-455b-fb8a-6aba76842614"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["processor\t: 0\n","vendor_id\t: GenuineIntel\n","cpu family\t: 6\n","model\t\t: 79\n","model name\t: Intel(R) Xeon(R) CPU @ 2.20GHz\n","stepping\t: 0\n","microcode\t: 0x1\n","cpu MHz\t\t: 2199.998\n","cache size\t: 56320 KB\n","physical id\t: 0\n","siblings\t: 2\n","core id\t\t: 0\n","cpu cores\t: 1\n","apicid\t\t: 0\n","initial apicid\t: 0\n","fpu\t\t: yes\n","fpu_exception\t: yes\n","cpuid level\t: 13\n","wp\t\t: yes\n","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt arat md_clear arch_capabilities\n","bugs\t\t: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa mmio_stale_data retbleed\n","bogomips\t: 4399.99\n","clflush size\t: 64\n","cache_alignment\t: 64\n","address sizes\t: 46 bits physical, 48 bits virtual\n","power management:\n","\n","processor\t: 1\n","vendor_id\t: GenuineIntel\n","cpu family\t: 6\n","model\t\t: 79\n","model name\t: Intel(R) Xeon(R) CPU @ 2.20GHz\n","stepping\t: 0\n","microcode\t: 0x1\n","cpu MHz\t\t: 2199.998\n","cache size\t: 56320 KB\n","physical id\t: 0\n","siblings\t: 2\n","core id\t\t: 0\n","cpu cores\t: 1\n","apicid\t\t: 1\n","initial apicid\t: 1\n","fpu\t\t: yes\n","fpu_exception\t: yes\n","cpuid level\t: 13\n","wp\t\t: yes\n","flags\t\t: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm rdseed adx smap xsaveopt arat md_clear arch_capabilities\n","bugs\t\t: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs taa mmio_stale_data retbleed\n","bogomips\t: 4399.99\n","clflush size\t: 64\n","cache_alignment\t: 64\n","address sizes\t: 46 bits physical, 48 bits virtual\n","power management:\n","\n"]}]},{"cell_type":"code","source":["# Compute and display complexity of Fibonacci\n","\n","import time\n","\n","def fibonacci(n):\n","    if n <= 1:\n","        return n\n","    return fibonacci(n-1) + fibonacci(n-2)\n","\n","\n","# My input data for the function\n","my_tuple = 5,10,15,20,25\n","\n","# Define empty bucket\n","rows_list = []\n","\n","for n in my_tuple:\n","\n","    # Begin tracking CPU time\n","    st = time.process_time(),\n","\n","    # Run algorithms\n","    result = fibonacci(n),\n","\n","    # Finish tracking CPU time\n","    et = time.process_time(),\n","\n","    # Calculate performance (end - begin)\n","    performance = [x - y for x, y in zip(list(et), list(st))]\n","\n","    # Collect results in a list\n","    rows_list.append(performance)\n","\n","# Write results in a table\n","df = pd.DataFrame(rows_list, index=my_tuple, columns=['CPU Performance in sec']) \n","print(df)\n","\n","# Visualize results in a graph\n","df = df.reset_index().rename(columns={\"index\": \"Datasize\"})\n","df.plot(x ='Datasize', y='CPU Performance in sec', kind = 'bar')\t"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":399},"id":"zstvW2jv5KUu","executionInfo":{"status":"ok","timestamp":1668442061612,"user_tz":-60,"elapsed":765,"user":{"displayName":"Alexander Del Toro Barba","userId":"15093306339731700599"}},"outputId":"0551c4cf-9053-4519-a2b7-4addd6a3ab6b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    CPU Performance in sec\n","5                 0.000021\n","10                0.000044\n","15                0.000499\n","20                0.004968\n","25                0.051973\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd17e38b650>"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["##### *Code for Generating plots of combinatorial laplacian gap, betti number and number of Toffolis for a combination of n's and k's*"],"metadata":{"id":"TAJnTy0Um25J"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"nMjd4-U5kg79"},"outputs":[],"source":["import networkx as nx\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import math\n","import pandas as pd\n","from scipy.special import comb\n","from scipy.spatial.distance import pdist, squareform\n","from scipy.sparse.linalg import eigs\n","from itertools import product\n","import statistics\n","\n","import sys\n","np.set_printoptions(threshold=sys.maxsize)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MW4oFo6TnhDP"},"outputs":[],"source":["def quantum_cost(n, E, r, gap, k, betti_k_minus_one):\n","  \"\"\"Calculates Toffoli count given parameters to the TDA algorithm.\n","  Args:\n","    n: number of vertices\n","    E: number of edges\n","    gap: difference between lowest and second lowest eigenvalue of the k-th\n","      order combinatorial Laplacian\n","    k: order of Betti number\n","    betti_k_minus_one: Betti number of order k-1\n","\n","  Returns:\n","    Toffoli count\n","  \"\"\"\n","  return n * E * np.sqrt(comb(n, k) / betti_k_minus_one) / (r * gap)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IiBy1qfVeqGk"},"outputs":[],"source":["def get_cliques_of_size(G, k):\n","  \"\"\"Gets cliques of a graph.\n","  Args:\n","    G: `nx.Graph` problem graph\n","    k: order of Betti number being estimated\n","\n","  Returns:\n","    A 3-tuple of `list`, respectively the cliques of size k-1, k and k+1\n","  \"\"\"\n","  all_cliques = list(nx.enumerate_all_cliques(G))\n","  lower_cliques = list(filter(lambda x: len(x) == k-1, all_cliques))\n","  cliques = list(filter(lambda x: len(x) == k, all_cliques))\n","  upper_cliques = list(filter(lambda x: len(x) == k+1, all_cliques))\n","\n","  return lower_cliques, cliques, upper_cliques"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mAUEFvVTijDK"},"outputs":[],"source":["def is_upper_clique(clique, upper_clique):\n","  \"\"\"Decides if two cliques are adjacent. They have to have difference 1 in size.\n","  Args:\n","    clique: the smaller clique\n","    upper_clique: the larger clique\n","\n","  Returns:\n","    Whether upper_clique is clique appended by one number\n","  \"\"\"\n","  return (len(upper_clique) - len(clique) == 1) and (len(set(upper_clique) - set(clique)) == 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BrDeFhFtjMf1"},"outputs":[],"source":["def get_number_of_upper_cliques(clique, upper_cliques):\n","  \"\"\"Gets number of upper cliques a clique has.\n","  Args:\n","    clique: the clique\n","    upper_cliques: a list with cliques of size 1 larger than clique\n","\n","  Returns:\n","    The number of cliques in upper_cliques that are upper to clique.\n","  \"\"\"\n","  total = 0\n","  for upper_clique in upper_cliques:\n","    if is_upper_clique(clique, upper_clique):\n","      total +=1\n","\n","  return total"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vo4LGDUqjiGx"},"outputs":[],"source":["def lower_not_upper_similarity(clique1, clique2, lower_cliques, upper_cliques):\n","  \"\"\"Calculates off-diagonal entries of combinatorial Laplacian.\n","\n","  Args:\n","    clique1: k-clique indexing the row\n","    clique2: k-clique indexing the column\n","    lower_cliques: `list` of (k-1)-cliques \n","    upper_cliques: `list` of (k+1)-cliques\n","\n","  Returns:\n","    The off-diagonal entry at coordinate (clique1, clique2).\n","  \"\"\"\n","  # have common upper?\n","  for upper_clique in upper_cliques:\n","    if is_upper_clique(clique1, upper_clique) and is_upper_clique(clique2, upper_clique):\n","      return 0\n","\n","  # don't have common upper\n","  # have common lower?\n","\n","  # NEW CODE\n","  # clique1 and clique2 are lower similar if and only if they differ on exactly one vertex\n","  # Sign is given by the parity of the number of different elements: odd --> +1, even --> -1\n","  if len(set(clique1).difference(set(clique2)))==1:\n","    return 2 * (np.count_nonzero(np.array(clique1) - np.array(clique2)) % 2) - 1\n","\n","  # OLD CODE\n","  '''\n","  for lower_clique in lower_cliques:\n","    if is_upper_clique(lower_clique, clique1) and is_upper_clique(lower_clique, clique2):\n","     # have a common lower. Need to find similarity.\n","\n","     diff_inds = []\n","     diff_elems1 = list(set(clique1) - set(clique2))\n","     diff_inds.append(clique1.index(diff_elems1[0]))\n","\n","     diff_elems2 = list(set(clique2) - set(clique1))        \n","     diff_inds.append(clique2.index(diff_elems2[0]))\n","\n","     if len(diff_inds) == 1:\n","       sign = 0\n","     else:  \n","       sign = ((diff_inds[1] - diff_inds[0]) % 2)\n","\n","     return (-1) ** sign\n","  '''\n","  \n","  # don't have common lower\n","  return 0"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JFE0ao-KdXdI"},"outputs":[],"source":["### THIS IS ACTUALLY COMPUTING THE ORDER (k-1)\n","# returns the combinatorial Laplacian of order k of a graph\n","def get_laplacian(G, k):\n","  \"\"\"Computes the k-th order Laplacian of a graph G using theorem 3.3.4 in\n","  http://www2.stat.duke.edu/~sayan/forkate/CombinatorialLaplacians.pdf.\n","\n","  Args:\n","    G: `nx.Graph` input graph\n","    k: order of Betti number to be estimated\n","\n","  Returns:\n","    The matrix of such combinatorial Laplacian.\n","  \"\"\"\n","  # standard Laplacian\n","  if k==0:\n","    return nx.laplacian_matrix(G)\n","\n","  #k += 1\n","  lower_cliques, cliques, upper_cliques = get_cliques_of_size(G, k)\n","\n","  n_cliques = len(cliques)\n","  laplacian = np.zeros((n_cliques, n_cliques))\n","  for (row, clique_row) in enumerate(cliques):\n","    for (column, clique_column) in enumerate(cliques):\n","      # diagonal\n","      if row == column:\n","        #laplacian[row][column] = k + 1 + get_number_of_upper_cliques(clique_row, upper_cliques)\n","        laplacian[row][column] = k + get_number_of_upper_cliques(clique_row, upper_cliques)\n","\n","      # off-diagonals\n","      else:\n","        laplacian[row][column] = lower_not_upper_similarity(clique_row, clique_column, lower_cliques, upper_cliques)\n","\n","  return laplacian"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yEPS73pSTcH_"},"outputs":[],"source":["def get_laplacian_spectrum(G, k):\n","  \"\"\"Computes the eigenvalue spectrum of the k-th order Laplacian of a graph G\n","\n","  Args:\n","    G: `nx.Graph` input graph\n","    k: order of the Betti number being estimated\n","\n","  Returns:\n","    `list` of eigenvalues\n","  \"\"\"\n","  laplacian = get_laplacian(G, k)\n","  eigvals = np.linalg.eigvals(laplacian)\n","  eigvals = np.sort(eigvals)\n","  \n","  return eigvals"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V1iz80gu5_f9"},"outputs":[],"source":["# calculates combinatorial laplacian gap of a graph G at order k as well as the\n","# number of zero eigenvalues\n","def get_laplacian_info(G, k):\n","  \"\"\"Computes the difference between the second lowest and lowest eigenvalues\n","  of the k-th order Laplacian of a graph G\n","\n","  Args:\n","    G: `nx.Graph` input graph\n","    k: order of the Betti number being estimated\n","\n","  Returns:\n","    The gap of the Laplacian and the number of zero eigenvalues.\n","  \"\"\"\n","  '''\n","  laplacian = get_laplacian(G, k)\n","  eigvals = np.linalg.eigvals(laplacian)\n","  '''\n","  eigvals = get_laplacian_spectrum(G, k)\n","  eigvals = list(map(lambda x: 0 if np.abs(x) < 0.000000000001 else x, list(eigvals)))\n","\n","  betti_number = eigvals.count(0)\n","  \n","  eigvals = np.unique(eigvals)\n","\n","  return eigvals[1] - eigvals[0], betti_number"]},{"cell_type":"code","source":["def generate_plots(ns, ks):\n","  \"\"\"Generates plots of combinatorial laplacian gap, betti number and number\n","  of Toffolis for a combination of n's and k's.\n","\n","  Args:\n","    ns: `list` of `int` of n's\n","    ks: `list` of `int` of n's\n","  \"\"\"\n","  n_samples = 50\n","  gaps = [[] for _ in range(len(ks))]\n","  gap_stds = [[] for _ in range(len(ks))]\n","  bettis = [[] for _ in range(len(ks))]\n","  betti_stds = [[] for _ in range(len(ks))]\n","  costs = [[] for _ in range(len(ks))]\n","  cost_stds = [[] for _ in range(len(ks))]\n","\n","  for k_ind, k in enumerate(ks):\n","    for n in ns:\n","      p = n ** (- (2 * k + 1)/float(2 * k * (k + 1)))\n","      betti_samples = []\n","      cost_samples = []\n","      gap_samples = []\n","      for ind in range(n_samples):\n","        print(f'(k, n, sample) = ({k}, {n}, {ind})')\n","        G = nx.erdos_renyi_graph(n, p)\n","        gap, betti_number = get_laplacian_info(G, k)\n","        betti_samples.append(betti_number)\n","        gap_samples.append(gap)\n","        cost_samples.append(quantum_cost(n, G.number_of_edges(), 0.05, gap, k, betti_number))\n","\n","      cost_avg = sum(cost_samples) / n_samples\n","      betti_avg = sum(betti_samples) / float(n_samples)\n","      gap_avg = sum(gap_samples) / n_samples\n","\n","      cost_std = statistics.stdev(np.real(cost_samples))\n","      betti_std = statistics.stdev(np.real(betti_samples))\n","      gap_std = statistics.stdev(np.real(gap_samples))\n","\n","      costs[k_ind].append(cost_avg)\n","      bettis[k_ind].append(betti_avg)\n","      gaps[k_ind].append(gap_avg)\n","\n","      cost_stds[k_ind].append(cost_std)\n","      betti_stds[k_ind].append(betti_std)\n","      gap_stds[k_ind].append(gap_std)\n","  \n","## Alex --->  I removed all plotting options from here to reduce CPU time\n","\n","#generate_plots([25], [1])"],"metadata":{"id":"ppukADtiOP1E"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### <font color=\"red\">*CPU Performance Calculation*"],"metadata":{"id":"DxO61quLgFq5"}},{"cell_type":"code","source":["import time\n","\n","rows_list = []\n","\n","my_tuple = [10, 15, 20, 25, 30, 35]\n","\n","for num in my_tuple:\n","    st = time.process_time(),\n","    generate_plots([num], [1]),\n","    et = time.process_time(),\n","    performance = [x - y for x, y in zip(list(et), list(st))]\n","    rows_list.append(performance)\n","\n","df = pd.DataFrame(rows_list, index=[*(my_tuple)], columns=['CPU Performance in sec for \\n k=1 order of Betti number'])\n","df['Growth'] = df.diff()\n","print(df)\n","df = df.reset_index().rename(columns={\"index\": \"Datasize n vertices\"})\n","df.plot(x ='Datasize n vertices', y='CPU Performance in sec for \\n k=1 order of Betti number', kind = 'bar')\t"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"nHf_658BhT_2","executionInfo":{"status":"ok","timestamp":1666625987788,"user_tz":-120,"elapsed":6057,"user":{"displayName":"Alexander Del Toro Barba","userId":"15093306339731700599"}},"outputId":"03a1eb41-6e1b-4516-cf8c-11b9d7316a0f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(k, n, sample) = (1, 10, 0)\n","(k, n, sample) = (1, 10, 1)\n","(k, n, sample) = (1, 10, 2)\n","(k, n, sample) = (1, 10, 3)\n","(k, n, sample) = (1, 10, 4)\n","(k, n, sample) = (1, 10, 5)\n","(k, n, sample) = (1, 10, 6)\n","(k, n, sample) = (1, 10, 7)\n","(k, n, sample) = (1, 10, 8)\n","(k, n, sample) = (1, 10, 9)\n","(k, n, sample) = (1, 10, 10)\n","(k, n, sample) = (1, 10, 11)\n","(k, n, sample) = (1, 10, 12)\n","(k, n, sample) = (1, 10, 13)\n","(k, n, sample) = (1, 10, 14)\n","(k, n, sample) = (1, 10, 15)\n","(k, n, sample) = (1, 10, 16)\n","(k, n, sample) = (1, 10, 17)\n","(k, n, sample) = (1, 10, 18)\n","(k, n, sample) = (1, 10, 19)\n","(k, n, sample) = (1, 10, 20)\n","(k, n, sample) = (1, 10, 21)\n","(k, n, sample) = (1, 10, 22)\n","(k, n, sample) = (1, 10, 23)\n","(k, n, sample) = (1, 10, 24)\n","(k, n, sample) = (1, 10, 25)\n","(k, n, sample) = (1, 10, 26)\n","(k, n, sample) = (1, 10, 27)\n","(k, n, sample) = (1, 10, 28)\n","(k, n, sample) = (1, 10, 29)\n","(k, n, sample) = (1, 10, 30)\n","(k, n, sample) = (1, 10, 31)\n","(k, n, sample) = (1, 10, 32)\n","(k, n, sample) = (1, 10, 33)\n","(k, n, sample) = (1, 10, 34)\n","(k, n, sample) = (1, 10, 35)\n","(k, n, sample) = (1, 10, 36)\n","(k, n, sample) = (1, 10, 37)\n","(k, n, sample) = (1, 10, 38)\n","(k, n, sample) = (1, 10, 39)\n","(k, n, sample) = (1, 10, 40)\n","(k, n, sample) = (1, 10, 41)\n","(k, n, sample) = (1, 10, 42)\n","(k, n, sample) = (1, 10, 43)\n","(k, n, sample) = (1, 10, 44)\n","(k, n, sample) = (1, 10, 45)\n","(k, n, sample) = (1, 10, 46)\n","(k, n, sample) = (1, 10, 47)\n","(k, n, sample) = (1, 10, 48)\n","(k, n, sample) = (1, 10, 49)\n","(k, n, sample) = (1, 15, 0)\n","(k, n, sample) = (1, 15, 1)\n","(k, n, sample) = (1, 15, 2)\n","(k, n, sample) = (1, 15, 3)\n","(k, n, sample) = (1, 15, 4)\n","(k, n, sample) = (1, 15, 5)\n","(k, n, sample) = (1, 15, 6)\n","(k, n, sample) = (1, 15, 7)\n","(k, n, sample) = (1, 15, 8)\n","(k, n, sample) = (1, 15, 9)\n","(k, n, sample) = (1, 15, 10)\n","(k, n, sample) = (1, 15, 11)\n","(k, n, sample) = (1, 15, 12)\n","(k, n, sample) = (1, 15, 13)\n","(k, n, sample) = (1, 15, 14)\n","(k, n, sample) = (1, 15, 15)\n","(k, n, sample) = (1, 15, 16)\n","(k, n, sample) = (1, 15, 17)\n","(k, n, sample) = (1, 15, 18)\n","(k, n, sample) = (1, 15, 19)\n","(k, n, sample) = (1, 15, 20)\n","(k, n, sample) = (1, 15, 21)\n","(k, n, sample) = (1, 15, 22)\n","(k, n, sample) = (1, 15, 23)\n","(k, n, sample) = (1, 15, 24)\n","(k, n, sample) = (1, 15, 25)\n","(k, n, sample) = (1, 15, 26)\n","(k, n, sample) = (1, 15, 27)\n","(k, n, sample) = (1, 15, 28)\n","(k, n, sample) = (1, 15, 29)\n","(k, n, sample) = (1, 15, 30)\n","(k, n, sample) = (1, 15, 31)\n","(k, n, sample) = (1, 15, 32)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:14: RuntimeWarning: divide by zero encountered in double_scalars\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:31: RuntimeWarning: invalid value encountered in cdouble_scalars\n","/usr/lib/python3.7/statistics.py:535: RuntimeWarning: invalid value encountered in double_scalars\n","  T, total, count = _sum((x-c)**2 for x in data)\n","/usr/lib/python3.7/statistics.py:538: RuntimeWarning: invalid value encountered in double_scalars\n","  U, total2, count2 = _sum((x-c) for x in data)\n"]},{"output_type":"stream","name":"stdout","text":["(k, n, sample) = (1, 15, 33)\n","(k, n, sample) = (1, 15, 34)\n","(k, n, sample) = (1, 15, 35)\n","(k, n, sample) = (1, 15, 36)\n","(k, n, sample) = (1, 15, 37)\n","(k, n, sample) = (1, 15, 38)\n","(k, n, sample) = (1, 15, 39)\n","(k, n, sample) = (1, 15, 40)\n","(k, n, sample) = (1, 15, 41)\n","(k, n, sample) = (1, 15, 42)\n","(k, n, sample) = (1, 15, 43)\n","(k, n, sample) = (1, 15, 44)\n","(k, n, sample) = (1, 15, 45)\n","(k, n, sample) = (1, 15, 46)\n","(k, n, sample) = (1, 15, 47)\n","(k, n, sample) = (1, 15, 48)\n","(k, n, sample) = (1, 15, 49)\n","(k, n, sample) = (1, 20, 0)\n","(k, n, sample) = (1, 20, 1)\n","(k, n, sample) = (1, 20, 2)\n","(k, n, sample) = (1, 20, 3)\n","(k, n, sample) = (1, 20, 4)\n","(k, n, sample) = (1, 20, 5)\n","(k, n, sample) = (1, 20, 6)\n","(k, n, sample) = (1, 20, 7)\n","(k, n, sample) = (1, 20, 8)\n","(k, n, sample) = (1, 20, 9)\n","(k, n, sample) = (1, 20, 10)\n","(k, n, sample) = (1, 20, 11)\n","(k, n, sample) = (1, 20, 12)\n","(k, n, sample) = (1, 20, 13)\n","(k, n, sample) = (1, 20, 14)\n","(k, n, sample) = (1, 20, 15)\n","(k, n, sample) = (1, 20, 16)\n","(k, n, sample) = (1, 20, 17)\n","(k, n, sample) = (1, 20, 18)\n","(k, n, sample) = (1, 20, 19)\n","(k, n, sample) = (1, 20, 20)\n","(k, n, sample) = (1, 20, 21)\n","(k, n, sample) = (1, 20, 22)\n","(k, n, sample) = (1, 20, 23)\n","(k, n, sample) = (1, 20, 24)\n","(k, n, sample) = (1, 20, 25)\n","(k, n, sample) = (1, 20, 26)\n","(k, n, sample) = (1, 20, 27)\n","(k, n, sample) = (1, 20, 28)\n","(k, n, sample) = (1, 20, 29)\n","(k, n, sample) = (1, 20, 30)\n","(k, n, sample) = (1, 20, 31)\n","(k, n, sample) = (1, 20, 32)\n","(k, n, sample) = (1, 20, 33)\n","(k, n, sample) = (1, 20, 34)\n","(k, n, sample) = (1, 20, 35)\n","(k, n, sample) = (1, 20, 36)\n","(k, n, sample) = (1, 20, 37)\n","(k, n, sample) = (1, 20, 38)\n","(k, n, sample) = (1, 20, 39)\n","(k, n, sample) = (1, 20, 40)\n","(k, n, sample) = (1, 20, 41)\n","(k, n, sample) = (1, 20, 42)\n","(k, n, sample) = (1, 20, 43)\n","(k, n, sample) = (1, 20, 44)\n","(k, n, sample) = (1, 20, 45)\n","(k, n, sample) = (1, 20, 46)\n","(k, n, sample) = (1, 20, 47)\n","(k, n, sample) = (1, 20, 48)\n","(k, n, sample) = (1, 20, 49)\n","(k, n, sample) = (1, 25, 0)\n","(k, n, sample) = (1, 25, 1)\n","(k, n, sample) = (1, 25, 2)\n","(k, n, sample) = (1, 25, 3)\n","(k, n, sample) = (1, 25, 4)\n","(k, n, sample) = (1, 25, 5)\n","(k, n, sample) = (1, 25, 6)\n","(k, n, sample) = (1, 25, 7)\n","(k, n, sample) = (1, 25, 8)\n","(k, n, sample) = (1, 25, 9)\n","(k, n, sample) = (1, 25, 10)\n","(k, n, sample) = (1, 25, 11)\n","(k, n, sample) = (1, 25, 12)\n","(k, n, sample) = (1, 25, 13)\n","(k, n, sample) = (1, 25, 14)\n","(k, n, sample) = (1, 25, 15)\n","(k, n, sample) = (1, 25, 16)\n","(k, n, sample) = (1, 25, 17)\n","(k, n, sample) = (1, 25, 18)\n","(k, n, sample) = (1, 25, 19)\n","(k, n, sample) = (1, 25, 20)\n","(k, n, sample) = (1, 25, 21)\n","(k, n, sample) = (1, 25, 22)\n","(k, n, sample) = (1, 25, 23)\n","(k, n, sample) = (1, 25, 24)\n","(k, n, sample) = (1, 25, 25)\n","(k, n, sample) = (1, 25, 26)\n","(k, n, sample) = (1, 25, 27)\n","(k, n, sample) = (1, 25, 28)\n","(k, n, sample) = (1, 25, 29)\n","(k, n, sample) = (1, 25, 30)\n","(k, n, sample) = (1, 25, 31)\n","(k, n, sample) = (1, 25, 32)\n","(k, n, sample) = (1, 25, 33)\n","(k, n, sample) = (1, 25, 34)\n","(k, n, sample) = (1, 25, 35)\n","(k, n, sample) = (1, 25, 36)\n","(k, n, sample) = (1, 25, 37)\n","(k, n, sample) = (1, 25, 38)\n","(k, n, sample) = (1, 25, 39)\n","(k, n, sample) = (1, 25, 40)\n","(k, n, sample) = (1, 25, 41)\n","(k, n, sample) = (1, 25, 42)\n","(k, n, sample) = (1, 25, 43)\n","(k, n, sample) = (1, 25, 44)\n","(k, n, sample) = (1, 25, 45)\n","(k, n, sample) = (1, 25, 46)\n","(k, n, sample) = (1, 25, 47)\n","(k, n, sample) = (1, 25, 48)\n","(k, n, sample) = (1, 25, 49)\n","(k, n, sample) = (1, 30, 0)\n","(k, n, sample) = (1, 30, 1)\n","(k, n, sample) = (1, 30, 2)\n","(k, n, sample) = (1, 30, 3)\n","(k, n, sample) = (1, 30, 4)\n","(k, n, sample) = (1, 30, 5)\n","(k, n, sample) = (1, 30, 6)\n","(k, n, sample) = (1, 30, 7)\n","(k, n, sample) = (1, 30, 8)\n","(k, n, sample) = (1, 30, 9)\n","(k, n, sample) = (1, 30, 10)\n","(k, n, sample) = (1, 30, 11)\n","(k, n, sample) = (1, 30, 12)\n","(k, n, sample) = (1, 30, 13)\n","(k, n, sample) = (1, 30, 14)\n","(k, n, sample) = (1, 30, 15)\n","(k, n, sample) = (1, 30, 16)\n","(k, n, sample) = (1, 30, 17)\n","(k, n, sample) = (1, 30, 18)\n","(k, n, sample) = (1, 30, 19)\n","(k, n, sample) = (1, 30, 20)\n","(k, n, sample) = (1, 30, 21)\n","(k, n, sample) = (1, 30, 22)\n","(k, n, sample) = (1, 30, 23)\n","(k, n, sample) = (1, 30, 24)\n","(k, n, sample) = (1, 30, 25)\n","(k, n, sample) = (1, 30, 26)\n","(k, n, sample) = (1, 30, 27)\n","(k, n, sample) = (1, 30, 28)\n","(k, n, sample) = (1, 30, 29)\n","(k, n, sample) = (1, 30, 30)\n","(k, n, sample) = (1, 30, 31)\n","(k, n, sample) = (1, 30, 32)\n","(k, n, sample) = (1, 30, 33)\n","(k, n, sample) = (1, 30, 34)\n","(k, n, sample) = (1, 30, 35)\n","(k, n, sample) = (1, 30, 36)\n","(k, n, sample) = (1, 30, 37)\n","(k, n, sample) = (1, 30, 38)\n","(k, n, sample) = (1, 30, 39)\n","(k, n, sample) = (1, 30, 40)\n","(k, n, sample) = (1, 30, 41)\n","(k, n, sample) = (1, 30, 42)\n","(k, n, sample) = (1, 30, 43)\n","(k, n, sample) = (1, 30, 44)\n","(k, n, sample) = (1, 30, 45)\n","(k, n, sample) = (1, 30, 46)\n","(k, n, sample) = (1, 30, 47)\n","(k, n, sample) = (1, 30, 48)\n","(k, n, sample) = (1, 30, 49)\n","(k, n, sample) = (1, 35, 0)\n","(k, n, sample) = (1, 35, 1)\n","(k, n, sample) = (1, 35, 2)\n","(k, n, sample) = (1, 35, 3)\n","(k, n, sample) = (1, 35, 4)\n","(k, n, sample) = (1, 35, 5)\n","(k, n, sample) = (1, 35, 6)\n","(k, n, sample) = (1, 35, 7)\n","(k, n, sample) = (1, 35, 8)\n","(k, n, sample) = (1, 35, 9)\n","(k, n, sample) = (1, 35, 10)\n","(k, n, sample) = (1, 35, 11)\n","(k, n, sample) = (1, 35, 12)\n","(k, n, sample) = (1, 35, 13)\n","(k, n, sample) = (1, 35, 14)\n","(k, n, sample) = (1, 35, 15)\n","(k, n, sample) = (1, 35, 16)\n","(k, n, sample) = (1, 35, 17)\n","(k, n, sample) = (1, 35, 18)\n","(k, n, sample) = (1, 35, 19)\n","(k, n, sample) = (1, 35, 20)\n","(k, n, sample) = (1, 35, 21)\n","(k, n, sample) = (1, 35, 22)\n","(k, n, sample) = (1, 35, 23)\n","(k, n, sample) = (1, 35, 24)\n","(k, n, sample) = (1, 35, 25)\n","(k, n, sample) = (1, 35, 26)\n","(k, n, sample) = (1, 35, 27)\n","(k, n, sample) = (1, 35, 28)\n","(k, n, sample) = (1, 35, 29)\n","(k, n, sample) = (1, 35, 30)\n","(k, n, sample) = (1, 35, 31)\n","(k, n, sample) = (1, 35, 32)\n","(k, n, sample) = (1, 35, 33)\n","(k, n, sample) = (1, 35, 34)\n","(k, n, sample) = (1, 35, 35)\n","(k, n, sample) = (1, 35, 36)\n","(k, n, sample) = (1, 35, 37)\n","(k, n, sample) = (1, 35, 38)\n","(k, n, sample) = (1, 35, 39)\n","(k, n, sample) = (1, 35, 40)\n","(k, n, sample) = (1, 35, 41)\n","(k, n, sample) = (1, 35, 42)\n","(k, n, sample) = (1, 35, 43)\n","(k, n, sample) = (1, 35, 44)\n","(k, n, sample) = (1, 35, 45)\n","(k, n, sample) = (1, 35, 46)\n","(k, n, sample) = (1, 35, 47)\n","(k, n, sample) = (1, 35, 48)\n","(k, n, sample) = (1, 35, 49)\n","    CPU Performance in sec for \\n k=1 order of Betti number    Growth\n","10                                           0.086738             NaN\n","15                                           0.226534        0.139796\n","20                                           0.545771        0.319237\n","25                                           0.996141        0.450370\n","30                                           1.618187        0.622046\n","35                                           2.449716        0.831530\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd0e6e8d150>"]},"metadata":{},"execution_count":112},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import time\n","\n","rows_list = []\n","\n","my_tuple = [10, 15, 20, 25, 30, 35]\n","\n","for num in my_tuple:\n","    st = time.process_time(),\n","    generate_plots([num], [2]),\n","    et = time.process_time(),\n","    performance = [x - y for x, y in zip(list(et), list(st))]\n","    rows_list.append(performance)\n","\n","df = pd.DataFrame(rows_list, index=[*(my_tuple)], columns=['CPU Performance in sec for \\n k=2 order of Betti number'])\n","df['Growth'] = df.diff()\n","print(df)\n","df = df.reset_index().rename(columns={\"index\": \"Datasize n vertices\"})\n","df.plot(x ='Datasize n vertices', y='CPU Performance in sec for \\n k=2 order of Betti number', kind = 'bar')\t"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"LaaLL6kXmBkX","executionInfo":{"status":"ok","timestamp":1666626113748,"user_tz":-120,"elapsed":116440,"user":{"displayName":"Alexander Del Toro Barba","userId":"15093306339731700599"}},"outputId":"98d70dc7-8dda-424d-9ce6-e445d919b1d5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(k, n, sample) = (2, 10, 0)\n","(k, n, sample) = (2, 10, 1)\n","(k, n, sample) = (2, 10, 2)\n","(k, n, sample) = (2, 10, 3)\n","(k, n, sample) = (2, 10, 4)\n","(k, n, sample) = (2, 10, 5)\n","(k, n, sample) = (2, 10, 6)\n","(k, n, sample) = (2, 10, 7)\n","(k, n, sample) = (2, 10, 8)\n","(k, n, sample) = (2, 10, 9)\n","(k, n, sample) = (2, 10, 10)\n","(k, n, sample) = (2, 10, 11)\n","(k, n, sample) = (2, 10, 12)\n","(k, n, sample) = (2, 10, 13)\n","(k, n, sample) = (2, 10, 14)\n","(k, n, sample) = (2, 10, 15)\n","(k, n, sample) = (2, 10, 16)\n","(k, n, sample) = (2, 10, 17)\n","(k, n, sample) = (2, 10, 18)\n","(k, n, sample) = (2, 10, 19)\n","(k, n, sample) = (2, 10, 20)\n","(k, n, sample) = (2, 10, 21)\n","(k, n, sample) = (2, 10, 22)\n","(k, n, sample) = (2, 10, 23)\n","(k, n, sample) = (2, 10, 24)\n","(k, n, sample) = (2, 10, 25)\n","(k, n, sample) = (2, 10, 26)\n","(k, n, sample) = (2, 10, 27)\n","(k, n, sample) = (2, 10, 28)\n","(k, n, sample) = (2, 10, 29)\n","(k, n, sample) = (2, 10, 30)\n","(k, n, sample) = (2, 10, 31)\n","(k, n, sample) = (2, 10, 32)\n","(k, n, sample) = (2, 10, 33)\n","(k, n, sample) = (2, 10, 34)\n","(k, n, sample) = (2, 10, 35)\n","(k, n, sample) = (2, 10, 36)\n","(k, n, sample) = (2, 10, 37)\n","(k, n, sample) = (2, 10, 38)\n","(k, n, sample) = (2, 10, 39)\n","(k, n, sample) = (2, 10, 40)\n","(k, n, sample) = (2, 10, 41)\n","(k, n, sample) = (2, 10, 42)\n","(k, n, sample) = (2, 10, 43)\n","(k, n, sample) = (2, 10, 44)\n","(k, n, sample) = (2, 10, 45)\n","(k, n, sample) = (2, 10, 46)\n","(k, n, sample) = (2, 10, 47)\n","(k, n, sample) = (2, 10, 48)\n","(k, n, sample) = (2, 10, 49)\n","(k, n, sample) = (2, 15, 0)\n","(k, n, sample) = (2, 15, 1)\n","(k, n, sample) = (2, 15, 2)\n","(k, n, sample) = (2, 15, 3)\n","(k, n, sample) = (2, 15, 4)\n","(k, n, sample) = (2, 15, 5)\n","(k, n, sample) = (2, 15, 6)\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:14: RuntimeWarning: divide by zero encountered in double_scalars\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:31: RuntimeWarning: invalid value encountered in cdouble_scalars\n","/usr/lib/python3.7/statistics.py:535: RuntimeWarning: invalid value encountered in double_scalars\n","  T, total, count = _sum((x-c)**2 for x in data)\n","/usr/lib/python3.7/statistics.py:538: RuntimeWarning: invalid value encountered in double_scalars\n","  U, total2, count2 = _sum((x-c) for x in data)\n"]},{"output_type":"stream","name":"stdout","text":["(k, n, sample) = (2, 15, 7)\n","(k, n, sample) = (2, 15, 8)\n","(k, n, sample) = (2, 15, 9)\n","(k, n, sample) = (2, 15, 10)\n","(k, n, sample) = (2, 15, 11)\n","(k, n, sample) = (2, 15, 12)\n","(k, n, sample) = (2, 15, 13)\n","(k, n, sample) = (2, 15, 14)\n","(k, n, sample) = (2, 15, 15)\n","(k, n, sample) = (2, 15, 16)\n","(k, n, sample) = (2, 15, 17)\n","(k, n, sample) = (2, 15, 18)\n","(k, n, sample) = (2, 15, 19)\n","(k, n, sample) = (2, 15, 20)\n","(k, n, sample) = (2, 15, 21)\n","(k, n, sample) = (2, 15, 22)\n","(k, n, sample) = (2, 15, 23)\n","(k, n, sample) = (2, 15, 24)\n","(k, n, sample) = (2, 15, 25)\n","(k, n, sample) = (2, 15, 26)\n","(k, n, sample) = (2, 15, 27)\n","(k, n, sample) = (2, 15, 28)\n","(k, n, sample) = (2, 15, 29)\n","(k, n, sample) = (2, 15, 30)\n","(k, n, sample) = (2, 15, 31)\n","(k, n, sample) = (2, 15, 32)\n","(k, n, sample) = (2, 15, 33)\n","(k, n, sample) = (2, 15, 34)\n","(k, n, sample) = (2, 15, 35)\n","(k, n, sample) = (2, 15, 36)\n","(k, n, sample) = (2, 15, 37)\n","(k, n, sample) = (2, 15, 38)\n","(k, n, sample) = (2, 15, 39)\n","(k, n, sample) = (2, 15, 40)\n","(k, n, sample) = (2, 15, 41)\n","(k, n, sample) = (2, 15, 42)\n","(k, n, sample) = (2, 15, 43)\n","(k, n, sample) = (2, 15, 44)\n","(k, n, sample) = (2, 15, 45)\n","(k, n, sample) = (2, 15, 46)\n","(k, n, sample) = (2, 15, 47)\n","(k, n, sample) = (2, 15, 48)\n","(k, n, sample) = (2, 15, 49)\n","(k, n, sample) = (2, 20, 0)\n","(k, n, sample) = (2, 20, 1)\n","(k, n, sample) = (2, 20, 2)\n","(k, n, sample) = (2, 20, 3)\n","(k, n, sample) = (2, 20, 4)\n","(k, n, sample) = (2, 20, 5)\n","(k, n, sample) = (2, 20, 6)\n","(k, n, sample) = (2, 20, 7)\n","(k, n, sample) = (2, 20, 8)\n","(k, n, sample) = (2, 20, 9)\n","(k, n, sample) = (2, 20, 10)\n","(k, n, sample) = (2, 20, 11)\n","(k, n, sample) = (2, 20, 12)\n","(k, n, sample) = (2, 20, 13)\n","(k, n, sample) = (2, 20, 14)\n","(k, n, sample) = (2, 20, 15)\n","(k, n, sample) = (2, 20, 16)\n","(k, n, sample) = (2, 20, 17)\n","(k, n, sample) = (2, 20, 18)\n","(k, n, sample) = (2, 20, 19)\n","(k, n, sample) = (2, 20, 20)\n","(k, n, sample) = (2, 20, 21)\n","(k, n, sample) = (2, 20, 22)\n","(k, n, sample) = (2, 20, 23)\n","(k, n, sample) = (2, 20, 24)\n","(k, n, sample) = (2, 20, 25)\n","(k, n, sample) = (2, 20, 26)\n","(k, n, sample) = (2, 20, 27)\n","(k, n, sample) = (2, 20, 28)\n","(k, n, sample) = (2, 20, 29)\n","(k, n, sample) = (2, 20, 30)\n","(k, n, sample) = (2, 20, 31)\n","(k, n, sample) = (2, 20, 32)\n","(k, n, sample) = (2, 20, 33)\n","(k, n, sample) = (2, 20, 34)\n","(k, n, sample) = (2, 20, 35)\n","(k, n, sample) = (2, 20, 36)\n","(k, n, sample) = (2, 20, 37)\n","(k, n, sample) = (2, 20, 38)\n","(k, n, sample) = (2, 20, 39)\n","(k, n, sample) = (2, 20, 40)\n","(k, n, sample) = (2, 20, 41)\n","(k, n, sample) = (2, 20, 42)\n","(k, n, sample) = (2, 20, 43)\n","(k, n, sample) = (2, 20, 44)\n","(k, n, sample) = (2, 20, 45)\n","(k, n, sample) = (2, 20, 46)\n","(k, n, sample) = (2, 20, 47)\n","(k, n, sample) = (2, 20, 48)\n","(k, n, sample) = (2, 20, 49)\n","(k, n, sample) = (2, 25, 0)\n","(k, n, sample) = (2, 25, 1)\n","(k, n, sample) = (2, 25, 2)\n","(k, n, sample) = (2, 25, 3)\n","(k, n, sample) = (2, 25, 4)\n","(k, n, sample) = (2, 25, 5)\n","(k, n, sample) = (2, 25, 6)\n","(k, n, sample) = (2, 25, 7)\n","(k, n, sample) = (2, 25, 8)\n","(k, n, sample) = (2, 25, 9)\n","(k, n, sample) = (2, 25, 10)\n","(k, n, sample) = (2, 25, 11)\n","(k, n, sample) = (2, 25, 12)\n","(k, n, sample) = (2, 25, 13)\n","(k, n, sample) = (2, 25, 14)\n","(k, n, sample) = (2, 25, 15)\n","(k, n, sample) = (2, 25, 16)\n","(k, n, sample) = (2, 25, 17)\n","(k, n, sample) = (2, 25, 18)\n","(k, n, sample) = (2, 25, 19)\n","(k, n, sample) = (2, 25, 20)\n","(k, n, sample) = (2, 25, 21)\n","(k, n, sample) = (2, 25, 22)\n","(k, n, sample) = (2, 25, 23)\n","(k, n, sample) = (2, 25, 24)\n","(k, n, sample) = (2, 25, 25)\n","(k, n, sample) = (2, 25, 26)\n","(k, n, sample) = (2, 25, 27)\n","(k, n, sample) = (2, 25, 28)\n","(k, n, sample) = (2, 25, 29)\n","(k, n, sample) = (2, 25, 30)\n","(k, n, sample) = (2, 25, 31)\n","(k, n, sample) = (2, 25, 32)\n","(k, n, sample) = (2, 25, 33)\n","(k, n, sample) = (2, 25, 34)\n","(k, n, sample) = (2, 25, 35)\n","(k, n, sample) = (2, 25, 36)\n","(k, n, sample) = (2, 25, 37)\n","(k, n, sample) = (2, 25, 38)\n","(k, n, sample) = (2, 25, 39)\n","(k, n, sample) = (2, 25, 40)\n","(k, n, sample) = (2, 25, 41)\n","(k, n, sample) = (2, 25, 42)\n","(k, n, sample) = (2, 25, 43)\n","(k, n, sample) = (2, 25, 44)\n","(k, n, sample) = (2, 25, 45)\n","(k, n, sample) = (2, 25, 46)\n","(k, n, sample) = (2, 25, 47)\n","(k, n, sample) = (2, 25, 48)\n","(k, n, sample) = (2, 25, 49)\n","(k, n, sample) = (2, 30, 0)\n","(k, n, sample) = (2, 30, 1)\n","(k, n, sample) = (2, 30, 2)\n","(k, n, sample) = (2, 30, 3)\n","(k, n, sample) = (2, 30, 4)\n","(k, n, sample) = (2, 30, 5)\n","(k, n, sample) = (2, 30, 6)\n","(k, n, sample) = (2, 30, 7)\n","(k, n, sample) = (2, 30, 8)\n","(k, n, sample) = (2, 30, 9)\n","(k, n, sample) = (2, 30, 10)\n","(k, n, sample) = (2, 30, 11)\n","(k, n, sample) = (2, 30, 12)\n","(k, n, sample) = (2, 30, 13)\n","(k, n, sample) = (2, 30, 14)\n","(k, n, sample) = (2, 30, 15)\n","(k, n, sample) = (2, 30, 16)\n","(k, n, sample) = (2, 30, 17)\n","(k, n, sample) = (2, 30, 18)\n","(k, n, sample) = (2, 30, 19)\n","(k, n, sample) = (2, 30, 20)\n","(k, n, sample) = (2, 30, 21)\n","(k, n, sample) = (2, 30, 22)\n","(k, n, sample) = (2, 30, 23)\n","(k, n, sample) = (2, 30, 24)\n","(k, n, sample) = (2, 30, 25)\n","(k, n, sample) = (2, 30, 26)\n","(k, n, sample) = (2, 30, 27)\n","(k, n, sample) = (2, 30, 28)\n","(k, n, sample) = (2, 30, 29)\n","(k, n, sample) = (2, 30, 30)\n","(k, n, sample) = (2, 30, 31)\n","(k, n, sample) = (2, 30, 32)\n","(k, n, sample) = (2, 30, 33)\n","(k, n, sample) = (2, 30, 34)\n","(k, n, sample) = (2, 30, 35)\n","(k, n, sample) = (2, 30, 36)\n","(k, n, sample) = (2, 30, 37)\n","(k, n, sample) = (2, 30, 38)\n","(k, n, sample) = (2, 30, 39)\n","(k, n, sample) = (2, 30, 40)\n","(k, n, sample) = (2, 30, 41)\n","(k, n, sample) = (2, 30, 42)\n","(k, n, sample) = (2, 30, 43)\n","(k, n, sample) = (2, 30, 44)\n","(k, n, sample) = (2, 30, 45)\n","(k, n, sample) = (2, 30, 46)\n","(k, n, sample) = (2, 30, 47)\n","(k, n, sample) = (2, 30, 48)\n","(k, n, sample) = (2, 30, 49)\n","(k, n, sample) = (2, 35, 0)\n","(k, n, sample) = (2, 35, 1)\n","(k, n, sample) = (2, 35, 2)\n","(k, n, sample) = (2, 35, 3)\n","(k, n, sample) = (2, 35, 4)\n","(k, n, sample) = (2, 35, 5)\n","(k, n, sample) = (2, 35, 6)\n","(k, n, sample) = (2, 35, 7)\n","(k, n, sample) = (2, 35, 8)\n","(k, n, sample) = (2, 35, 9)\n","(k, n, sample) = (2, 35, 10)\n","(k, n, sample) = (2, 35, 11)\n","(k, n, sample) = (2, 35, 12)\n","(k, n, sample) = (2, 35, 13)\n","(k, n, sample) = (2, 35, 14)\n","(k, n, sample) = (2, 35, 15)\n","(k, n, sample) = (2, 35, 16)\n","(k, n, sample) = (2, 35, 17)\n","(k, n, sample) = (2, 35, 18)\n","(k, n, sample) = (2, 35, 19)\n","(k, n, sample) = (2, 35, 20)\n","(k, n, sample) = (2, 35, 21)\n","(k, n, sample) = (2, 35, 22)\n","(k, n, sample) = (2, 35, 23)\n","(k, n, sample) = (2, 35, 24)\n","(k, n, sample) = (2, 35, 25)\n","(k, n, sample) = (2, 35, 26)\n","(k, n, sample) = (2, 35, 27)\n","(k, n, sample) = (2, 35, 28)\n","(k, n, sample) = (2, 35, 29)\n","(k, n, sample) = (2, 35, 30)\n","(k, n, sample) = (2, 35, 31)\n","(k, n, sample) = (2, 35, 32)\n","(k, n, sample) = (2, 35, 33)\n","(k, n, sample) = (2, 35, 34)\n","(k, n, sample) = (2, 35, 35)\n","(k, n, sample) = (2, 35, 36)\n","(k, n, sample) = (2, 35, 37)\n","(k, n, sample) = (2, 35, 38)\n","(k, n, sample) = (2, 35, 39)\n","(k, n, sample) = (2, 35, 40)\n","(k, n, sample) = (2, 35, 41)\n","(k, n, sample) = (2, 35, 42)\n","(k, n, sample) = (2, 35, 43)\n","(k, n, sample) = (2, 35, 44)\n","(k, n, sample) = (2, 35, 45)\n","(k, n, sample) = (2, 35, 46)\n","(k, n, sample) = (2, 35, 47)\n","(k, n, sample) = (2, 35, 48)\n","(k, n, sample) = (2, 35, 49)\n","    CPU Performance in sec for \\n k=2 order of Betti number      Growth\n","10                                           0.192233               NaN\n","15                                           1.156496          0.964262\n","20                                           4.461346          3.304851\n","25                                          17.503131         13.041785\n","30                                         163.410731        145.907599\n","35                                         271.800879        108.390148\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd0e6e1b410>"]},"metadata":{},"execution_count":113},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Simple double check\n","%time generate_plots([25], [1])"],"metadata":{"id":"hJLICisFGuJR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1666626235206,"user_tz":-120,"elapsed":1061,"user":{"displayName":"Alexander Del Toro Barba","userId":"15093306339731700599"}},"outputId":"fe098286-f5d8-46e7-dabf-602ea3ed4a36"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(k, n, sample) = (1, 25, 0)\n","(k, n, sample) = (1, 25, 1)\n","(k, n, sample) = (1, 25, 2)\n","(k, n, sample) = (1, 25, 3)\n","(k, n, sample) = (1, 25, 4)\n","(k, n, sample) = (1, 25, 5)\n","(k, n, sample) = (1, 25, 6)\n","(k, n, sample) = (1, 25, 7)\n","(k, n, sample) = (1, 25, 8)\n","(k, n, sample) = (1, 25, 9)\n","(k, n, sample) = (1, 25, 10)\n","(k, n, sample) = (1, 25, 11)\n","(k, n, sample) = (1, 25, 12)\n","(k, n, sample) = (1, 25, 13)\n","(k, n, sample) = (1, 25, 14)\n","(k, n, sample) = (1, 25, 15)\n","(k, n, sample) = (1, 25, 16)\n","(k, n, sample) = (1, 25, 17)\n","(k, n, sample) = (1, 25, 18)\n","(k, n, sample) = (1, 25, 19)\n","(k, n, sample) = (1, 25, 20)\n","(k, n, sample) = (1, 25, 21)\n","(k, n, sample) = (1, 25, 22)\n","(k, n, sample) = (1, 25, 23)\n","(k, n, sample) = (1, 25, 24)\n","(k, n, sample) = (1, 25, 25)\n","(k, n, sample) = (1, 25, 26)\n","(k, n, sample) = (1, 25, 27)\n","(k, n, sample) = (1, 25, 28)\n","(k, n, sample) = (1, 25, 29)\n","(k, n, sample) = (1, 25, 30)\n","(k, n, sample) = (1, 25, 31)\n","(k, n, sample) = (1, 25, 32)\n","(k, n, sample) = (1, 25, 33)\n","(k, n, sample) = (1, 25, 34)\n","(k, n, sample) = (1, 25, 35)\n","(k, n, sample) = (1, 25, 36)\n","(k, n, sample) = (1, 25, 37)\n","(k, n, sample) = (1, 25, 38)\n","(k, n, sample) = (1, 25, 39)\n","(k, n, sample) = (1, 25, 40)\n","(k, n, sample) = (1, 25, 41)\n","(k, n, sample) = (1, 25, 42)\n","(k, n, sample) = (1, 25, 43)\n","(k, n, sample) = (1, 25, 44)\n","(k, n, sample) = (1, 25, 45)\n","(k, n, sample) = (1, 25, 46)\n","(k, n, sample) = (1, 25, 47)\n","(k, n, sample) = (1, 25, 48)\n","(k, n, sample) = (1, 25, 49)\n","CPU times: user 865 ms, sys: 21.4 ms, total: 887 ms\n","Wall time: 860 ms\n"]}]}],"metadata":{"colab":{"collapsed_sections":["-4zjA63e4o1-","TAJnTy0Um25J","DxO61quLgFq5"],"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"gpuClass":"premium"},"nbformat":4,"nbformat_minor":0}